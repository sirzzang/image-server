server {
    listen 8888;
    listen [::]:8888;
    server_name localhost;

    client_max_body_size 1G; # body size가 작은 경우 file upload시 499 에러 발생

    # 다운로드 url 재작성
    rewrite "^/images/([0-9a-z]{2})([0-9a-z]{2})([0-9a-z]{2})([0-9a-z]{2})([0-9a-z]{2})([0-9a-z]{2})(.*)$" /images/download/$1/$2/$3/$4/$5/$6/$7 last;
    rewrite_log on;

    # 이미지 다운로드
    location /images/download/ {
        alias /images/;
        try_files $uri $uri.jpg $uri.jpeg $uri.gif $uri.png $uri.svg $uri.svgz $uri.bmp $uri.tif $uri.tiff $uri.ico $uri/ =404;
    }

    # CGI script: /scripts 경로 내 CGI 스크립트 모두 실행 권한(x) 있어야 함 
    location ~ \.py$ {
        
        gzip off;

        # document root 설정
        root /home/eraser/nginx/scripts; # 설정하지 않은 경우, default html/

        # fastcgi params
        include /home/eraser/nginx/conf/fastcgi_params;
        # include $WAPL_PAY_MEDIA_APP_ROOT/config/fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

        # fcgiwrap: fastCGI를 이용해 CGI 어플리케이션을 기동하는 간단한 서버
        fastcgi_pass unix:/var/run/fcgiwrap.socket;

        # fastcgi timeout 설정
        fastcgi_buffers 256 48k;
        fastcgi_buffer_size 48k;
        fastcgi_connect_timeout 600s;
        fastcgi_send_timeout 600s;
        fastcgi_read_timeout 600s;
        fastcgi_busy_buffers_size 256k;
        fastcgi_temp_file_write_size 256k;
    
        fastcgi_max_temp_file_size 0;
    }

    # 이미지 단건 upload
    location /upload {

        # 업로드 모듈 내부 hashing 알고리즘을 통해 파일명 변경, 디렉토리 레벨 분리 가능
        # TODO: 하위 디렉토리 해시 레벨 shell script 단에서 저장 필요
        upload_store /home/eraser/nginx/images 2 2 2;
        # upload_store /home/eraser/nginx/tmp/images;

        # form 처리를 위한 필드
        upload_set_form_field file_name "$upload_file_name";
        upload_set_form_field content_type "$upload_content_type";
        upload_set_form_field path "$upload_tmp_path";

        # TODO: 에러 코드별 cleanup 확인
        upload_cleanup 400-404 499 500-505;

        # 업로드 후 요청에 대한 응답 처리
        upload_pass /upload.py;

        # 업로드된 파일에 대한 권한 설정
        upload_store_access user:rw;
    }

    # 이미지 다중 업로드
    location /upload_many {

        upload_store /home/eraser/nginx/images 2 2 2;
        
        # upload form 처리 위해 필요한 필드
        upload_set_form_field $upload_file_number "$upload_file_name";
        upload_set_form_field $upload_file_number "$upload_content_type";
        upload_set_form_field $upload_file_number "$upload_tmp_path";

        # TODO: 에러 코드별 cleanup 확인
        upload_cleanup 400-404 500-505;

        # 업로드 후 요청에 대한 응답 처리
        upload_pass /upload_many.py;
    }

    # 이미지 삭제
    location /delete {
        rewrite "^/delete/([0-9]{2})([0-9]{2})([0-9]{2})([0-9]+)" /delete.py?dir1=$1&dir2=$2&dir3=$3&filename=$4 last;
        limit_except POST {
            deny all;
        }
    }
}
